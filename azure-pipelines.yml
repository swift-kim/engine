# Azure Pipelines YAML pipeline.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema
name: ninja

trigger:
- flutter-*-tizen
pr:
- flutter-*-tizen

jobs:
- job: format
  pool:
    name: Default
    demands: agent.os -equals Linux
  steps:
  - checkout: self
    path: src/flutter
  - bash: |
      gclient sync -f -D
      sed -i 's/"-Wno-non-c-typedef-for-linkage",//g' build/config/compiler/BUILD.gn
      sed -i 's/"-Wno-psabi",//g' build/config/compiler/BUILD.gn
    displayName: Run gclient sync
    workingDirectory: $(Pipeline.Workspace)/src
    failOnStderr: true
  - bash: ci/format.sh
    displayName: Verify formatting
- job: build
  dependsOn: format
  strategy:
    matrix:
      tizen-arm-release:
        arch: arm
        mode: release
        targetTriple: armv7l-tizen-linux-gnueabi
      tizen-arm-profile:
        arch: arm
        mode: profile
        targetTriple: armv7l-tizen-linux-gnueabi
      tizen-arm-debug:
        arch: arm
        mode: debug
        targetTriple: armv7l-tizen-linux-gnueabi
      tizen-arm64-release:
        arch: arm64
        mode: release
        targetTriple: aarch64-tizen-linux-gnu
      tizen-arm64-profile:
        arch: arm64
        mode: profile
        targetTriple: aarch64-tizen-linux-gnu
      tizen-arm64-debug:
        arch: arm64
        mode: debug
        targetTriple: aarch64-tizen-linux-gnu
      tizen-x86-debug:
        arch: x86
        mode: debug
        targetTriple: i586-tizen-linux-gnueabi
  pool:
    name: Default
    demands: agent.os -equals Linux
  timeoutInMinutes: 80
  cancelTimeoutInMinutes: 1
  steps:
  - checkout: self
    path: src/flutter
  - bash: |
      flutter/tools/gn \
        --target-os linux \
        --linux-cpu $(arch) \
        --target-toolchain $HOME/tizen_tools/toolchains \
        --target-sysroot $HOME/tizen_tools/sysroot/$(arch) \
        --target-triple $(targetTriple) \
        --runtime-mode $(mode) \
        --enable-fontconfig \
        --embedder-for-target \
        --disable-desktop-embeddings \
        --build-tizen-shell
      ninja -C out/linux_$(mode)_$(arch)
    displayName: Build
    workingDirectory: $(Pipeline.Workspace)/src
    failOnStderr: true
  - bash: |
      ../check_symbols.py out/linux_$(mode)_$(arch)/libflutter_engine.so
      ../check_symbols.py out/linux_$(mode)_$(arch)/libflutter_tizen_wearable.so
    displayName: Verify symbol references
    workingDirectory: $(Pipeline.Workspace)/src
    failOnStderr: true
    condition: eq(variables['System.JobName'], 'tizen-arm-release')
  - bash: |
      OUTDIR=$(Build.StagingDirectory)
      cp out/linux_$(mode)_$(arch)/libflutter_*.so $OUTDIR
      if [[ $(System.JobName) == "tizen-arm-release" ]]; then
        mkdir $OUTDIR/tizen-common
        cp -r out/linux_$(mode)_$(arch)/{cpp_client_wrapper,icu,public} $OUTDIR/tizen-common
        rm $OUTDIR/tizen-common/cpp_client_wrapper/engine_method_result.cc
      fi
    displayName: Copy artifacts
    workingDirectory: $(Pipeline.Workspace)/src
    failOnStderr: true
  - publish: $(Build.StagingDirectory)
    artifact: $(System.JobName)
- job: release
  dependsOn: build
  pool:
    name: Default
    demands: agent.os -equals Linux
  workspace:
    clean: outputs
  steps:
  - checkout: self
    path: src/flutter
  - download: current
  - bash: |
      mv $(Pipeline.Workspace)/tizen-arm-release/tizen-common .
      mv $(Pipeline.Workspace)/tizen-* .
      for x in $(ls -d1 tizen-*); do
        echo "Archiving $x.zip..."
        (cd $x; zip -rq $(Build.StagingDirectory)/$x.zip *)
      done
    displayName: Create releases
    workingDirectory: $(Build.BinariesDirectory)
    failOnStderr: true
  - publish: $(Build.StagingDirectory)
    artifact: release
