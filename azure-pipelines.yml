# Azure Pipelines YAML pipeline.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema
name: ninja

trigger:
- flutter-*-tizen
pr:
- flutter-*-tizen

jobs:
- job: build
  strategy:
    matrix:
      tizen-arm-release:
        arch: arm
        mode: release
        targetTriple: armv7l-tizen-linux-gnueabi
      tizen-arm-profile:
        arch: arm
        mode: profile
        targetTriple: armv7l-tizen-linux-gnueabi
      tizen-arm-debug:
        arch: arm
        mode: debug
        targetTriple: armv7l-tizen-linux-gnueabi
      tizen-arm64-release:
        arch: arm64
        mode: release
        targetTriple: aarch64-tizen-linux-gnu
      tizen-arm64-profile:
        arch: arm64
        mode: profile
        targetTriple: aarch64-tizen-linux-gnu
      tizen-arm64-debug:
        arch: arm64
        mode: debug
        targetTriple: aarch64-tizen-linux-gnu
      tizen-x86-debug:
        arch: x86
        mode: debug
        targetTriple: i586-tizen-linux-gnueabi
  pool:
    name: Default
    demands: agent.os -equals Linux
  timeoutInMinutes: 60
  cancelTimeoutInMinutes: 1
  variables:
  - name: buildroot
    value: $(Pipeline.Workspace)/src
  steps:
  - checkout: self
    path: src/flutter
  - bash: |
      git reset --hard HEAD
      gclient sync -D
      sed -i 's/"-Wno-non-c-typedef-for-linkage",//g' build/config/compiler/BUILD.gn
      sed -i 's/"-Wno-psabi",//g' build/config/compiler/BUILD.gn
    displayName: Prepare for build
    workingDirectory: $(buildroot)
    failOnStderr: true
  - bash: |
      flutter/tools/gn \
        --target-os linux \
        --linux-cpu $(arch) \
        --target-toolchain `pwd`/tizen_tools/toolchains \
        --target-sysroot `pwd`/tizen_tools/sysroot/$(arch) \
        --target-triple $(targetTriple) \
        --runtime-mode $(mode) \
        --enable-fontconfig \
        --embedder-for-target \
        --disable-desktop-embeddings \
        --build-tizen-shell \
        --out-dir output/default
      ninja -C output/default/out/linux_$(mode)_$(arch)
    displayName: Build
    workingDirectory: $(buildroot)
    failOnStderr: true
    env:
      PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig
  - bash: |
      flutter/tools/gn \
        --target-os linux \
        --linux-cpu $(arch) \
        --target-toolchain `pwd`/tizen_tools/toolchains \
        --target-sysroot `pwd`/tizen_tools/sysroot/$(arch)_40 \
        --target-triple $(targetTriple) \
        --runtime-mode $(mode) \
        --enable-fontconfig \
        --embedder-for-target \
        --disable-desktop-embeddings \
        --build-tizen-shell \
        --tizen-sdk-4 \
        --out-dir output/tizen40
      ninja -C output/tizen40/out/linux_$(mode)_$(arch)
    displayName: Build for Tizen 4.0
    workingDirectory: $(buildroot)
    condition: ne(variables['arch'], 'arm64')
    failOnStderr: true
  - bash: |
      OUTDIR=$(Build.StagingDirectory)
      cp default/out/linux_$(mode)_$(arch)/libflutter_engine.so $OUTDIR
      cp default/out/linux_$(mode)_$(arch)/libflutter_tizen.so $OUTDIR
      if [[ "$(arch)" != "arm64" ]]; then
        cp tizen40/out/linux_$(mode)_$(arch)/libflutter_tizen.so $OUTDIR/libflutter_tizen40.so
      fi
    displayName: Copy artifacts
    workingDirectory: $(buildroot)/output
    failOnStderr: true
  - publish: $(Build.StagingDirectory)
    artifact: $(System.JobName)
- job: release
  dependsOn: build
  pool:
    name: Default
    demands: agent.os -equals Linux
  workspace:
    clean: outputs
  variables:
  - name: upstreamVersion
    value: 40441def692f444660a11e20fac37af9050245ab
  steps:
  - checkout: self
    path: src/flutter
  - download: current
  - bash: |
      mkdir -p common/client_wrapper
      ROOT=$(Pipeline.Workspace)/src/flutter/shell/platform
      cp $ROOT/common/cpp/client_wrapper/*.{h,cc} common/client_wrapper
      rm common/client_wrapper/{*_unittests.*,engine_method_result.cc}
      cp -r $ROOT/common/cpp/public common
      cp -r $ROOT/common/cpp/client_wrapper/include common/client_wrapper
      cp $ROOT/tizen/public/*.h common/public
      cp $ROOT/tizen/LICENSE .
    displayName: Copy headers
    workingDirectory: $(Build.BinariesDirectory)
    failOnStderr: true
  - bash: |
      cp $(Pipeline.Workspace)/src/third_party/icu/flutter/icudtl.dat common
      mv $(Pipeline.Workspace)/tizen-* .
      for platform in linux windows darwin; do
        for arch in arm arm64; do
          for mode in release profile; do
            curl -o tmp.zip https://storage.googleapis.com/flutter_infra/flutter/$(upstreamVersion)/android-$arch-$mode/$platform-x64.zip 2> /dev/null
            unzip tmp.zip -d tizen-$arch-$mode/$platform-x64 && rm tmp.zip
          done
          zip -r $(Build.StagingDirectory)/$platform-x64.zip *
          rm -r tizen-$arch-*/$platform-x64
        done
      done
    displayName: Create releases
    workingDirectory: $(Build.BinariesDirectory)
    failOnStderr: true
  - publish: $(Build.StagingDirectory)
    artifact: release
